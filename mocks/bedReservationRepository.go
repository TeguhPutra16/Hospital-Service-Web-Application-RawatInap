// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	bedreservation "github.com/KamarRS-App/KamarRS-App/features/bedReservation"
	mock "github.com/stretchr/testify/mock"
)

// BedReservationRepository is an autogenerated mock type for the RepositoryInterface type
type BedReservationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: input, userId
func (_m *BedReservationRepository) Create(input bedreservation.BedReservationCore, userId uint) (bedreservation.BedReservationCore, error) {
	ret := _m.Called(input, userId)

	var r0 bedreservation.BedReservationCore
	if rf, ok := ret.Get(0).(func(bedreservation.BedReservationCore, uint) bedreservation.BedReservationCore); ok {
		r0 = rf(input, userId)
	} else {
		r0 = ret.Get(0).(bedreservation.BedReservationCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bedreservation.BedReservationCore, uint) error); ok {
		r1 = rf(input, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePayment provides a mock function with given fields: input
func (_m *BedReservationRepository) CreatePayment(input bedreservation.BedReservationCore) (bedreservation.BedReservationCore, error) {
	ret := _m.Called(input)

	var r0 bedreservation.BedReservationCore
	if rf, ok := ret.Get(0).(func(bedreservation.BedReservationCore) bedreservation.BedReservationCore); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(bedreservation.BedReservationCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bedreservation.BedReservationCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: bedResId
func (_m *BedReservationRepository) Delete(bedResId uint) error {
	ret := _m.Called(bedResId)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(bedResId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: bedResId
func (_m *BedReservationRepository) GetById(bedResId uint) (bedreservation.BedReservationCore, error) {
	ret := _m.Called(bedResId)

	var r0 bedreservation.BedReservationCore
	if rf, ok := ret.Get(0).(func(uint) bedreservation.BedReservationCore); ok {
		r0 = rf(bedResId)
	} else {
		r0 = ret.Get(0).(bedreservation.BedReservationCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(bedResId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPayment provides a mock function with given fields: kodeDaftar
func (_m *BedReservationRepository) GetPayment(kodeDaftar string) (bedreservation.BedReservationCore, error) {
	ret := _m.Called(kodeDaftar)

	var r0 bedreservation.BedReservationCore
	if rf, ok := ret.Get(0).(func(string) bedreservation.BedReservationCore); ok {
		r0 = rf(kodeDaftar)
	} else {
		r0 = ret.Get(0).(bedreservation.BedReservationCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(kodeDaftar)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistrations provides a mock function with given fields: limit, offset, hospitalId
func (_m *BedReservationRepository) GetRegistrations(limit int, offset int, hospitalId int) ([]bedreservation.BedReservationCore, int, error) {
	ret := _m.Called(limit, offset, hospitalId)

	var r0 []bedreservation.BedReservationCore
	if rf, ok := ret.Get(0).(func(int, int, int) []bedreservation.BedReservationCore); ok {
		r0 = rf(limit, offset, hospitalId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bedreservation.BedReservationCore)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(limit, offset, hospitalId)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, int) error); ok {
		r2 = rf(limit, offset, hospitalId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PaymentNotif provides a mock function with given fields: callback
func (_m *BedReservationRepository) PaymentNotif(callback bedreservation.BedReservationCore) error {
	ret := _m.Called(callback)

	var r0 error
	if rf, ok := ret.Get(0).(func(bedreservation.BedReservationCore) error); ok {
		r0 = rf(callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBedReservation provides a mock function with given fields: input
func (_m *BedReservationRepository) UpdateBedReservation(input bedreservation.BedReservationCore) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(bedreservation.BedReservationCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBedReservationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBedReservationRepository creates a new instance of BedReservationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBedReservationRepository(t mockConstructorTestingTNewBedReservationRepository) *BedReservationRepository {
	mock := &BedReservationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
