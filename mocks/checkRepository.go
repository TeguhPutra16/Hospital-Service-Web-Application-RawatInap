// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	checkupreservation "github.com/KamarRS-App/KamarRS-App/features/checkupReservation"
	mock "github.com/stretchr/testify/mock"
)

// CheckRepo is an autogenerated mock type for the RepositoryInterface type
type CheckRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input, userId
func (_m *CheckRepo) Create(input checkupreservation.CheckupReservationCore, userId int) error {
	ret := _m.Called(input, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(checkupreservation.CheckupReservationCore, int) error); ok {
		r0 = rf(input, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByPracticesId provides a mock function with given fields: offset, limit, id
func (_m *CheckRepo) GetByPracticesId(offset int, limit int, id int) ([]checkupreservation.CheckupReservationCore, int, error) {
	ret := _m.Called(offset, limit, id)

	var r0 []checkupreservation.CheckupReservationCore
	if rf, ok := ret.Get(0).(func(int, int, int) []checkupreservation.CheckupReservationCore); ok {
		r0 = rf(offset, limit, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]checkupreservation.CheckupReservationCore)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(offset, limit, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, int) error); ok {
		r2 = rf(offset, limit, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByreservationId provides a mock function with given fields: id
func (_m *CheckRepo) GetByreservationId(id int) (checkupreservation.CheckupReservationCore, error) {
	ret := _m.Called(id)

	var r0 checkupreservation.CheckupReservationCore
	if rf, ok := ret.Get(0).(func(int) checkupreservation.CheckupReservationCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(checkupreservation.CheckupReservationCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCheckRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckRepo creates a new instance of CheckRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckRepo(t mockConstructorTestingTNewCheckRepo) *CheckRepo {
	mock := &CheckRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
