// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	auth "github.com/KamarRS-App/KamarRS-App/features/auth"
	hospitalstaffrepository "github.com/KamarRS-App/KamarRS-App/features/hospitalstaff/repository"
	kamarrsteamrepository "github.com/KamarRS-App/KamarRS-App/features/kamarrsteam/repository"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/KamarRS-App/KamarRS-App/features/user/repository"
)

// AuthRepository is an autogenerated mock type for the RepositoryInterface type
type AuthRepository struct {
	mock.Mock
}

// Login provides a mock function with given fields: email, pass
func (_m *AuthRepository) Login(email string, pass string) (string, repository.User, error) {
	ret := _m.Called(email, pass)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, pass)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 repository.User
	if rf, ok := ret.Get(1).(func(string, string) repository.User); ok {
		r1 = rf(email, pass)
	} else {
		r1 = ret.Get(1).(repository.User)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, pass)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoginOauth provides a mock function with given fields: _a0
func (_m *AuthRepository) LoginOauth(_a0 auth.Oauth) (string, repository.User, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(auth.Oauth) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 repository.User
	if rf, ok := ret.Get(1).(func(auth.Oauth) repository.User); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(repository.User)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(auth.Oauth) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoginStaff provides a mock function with given fields: email, pass
func (_m *AuthRepository) LoginStaff(email string, pass string) (string, hospitalstaffrepository.HospitalStaff, error) {
	ret := _m.Called(email, pass)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, pass)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 hospitalstaffrepository.HospitalStaff
	if rf, ok := ret.Get(1).(func(string, string) hospitalstaffrepository.HospitalStaff); ok {
		r1 = rf(email, pass)
	} else {
		r1 = ret.Get(1).(hospitalstaffrepository.HospitalStaff)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, pass)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoginTeam provides a mock function with given fields: email, password
func (_m *AuthRepository) LoginTeam(email string, password string) (string, kamarrsteamrepository.KamarRsTeam, error) {
	ret := _m.Called(email, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 kamarrsteamrepository.KamarRsTeam
	if rf, ok := ret.Get(1).(func(string, string) kamarrsteamrepository.KamarRsTeam); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Get(1).(kamarrsteamrepository.KamarRsTeam)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewAuthRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthRepository(t mockConstructorTestingTNewAuthRepository) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
