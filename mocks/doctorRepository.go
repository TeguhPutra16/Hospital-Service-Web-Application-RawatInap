// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	doctor "github.com/KamarRS-App/KamarRS-App/features/doctor"
	mock "github.com/stretchr/testify/mock"
)

// DoctorRepository is an autogenerated mock type for the RepositoryInterface type
type DoctorRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *DoctorRepository) Create(input doctor.DoctorCore) (int, error) {
	ret := _m.Called(input)

	var r0 int
	if rf, ok := ret.Get(0).(func(doctor.DoctorCore) int); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(doctor.DoctorCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *DoctorRepository) Delete(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *DoctorRepository) GetAll() ([]doctor.DoctorCore, error) {
	ret := _m.Called()

	var r0 []doctor.DoctorCore
	if rf, ok := ret.Get(0).(func() []doctor.DoctorCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.DoctorCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *DoctorRepository) GetById(id int) (doctor.DoctorCore, error) {
	ret := _m.Called(id)

	var r0 doctor.DoctorCore
	if rf, ok := ret.Get(0).(func(int) doctor.DoctorCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctor.DoctorCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *DoctorRepository) Update(input doctor.DoctorCore, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorCore, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDoctorRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDoctorRepository creates a new instance of DoctorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDoctorRepository(t mockConstructorTestingTNewDoctorRepository) *DoctorRepository {
	mock := &DoctorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
