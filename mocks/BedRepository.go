// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	bed "github.com/KamarRS-App/KamarRS-App/features/bed"
	mock "github.com/stretchr/testify/mock"
)

// BedRepository is an autogenerated mock type for the RepositoryInterface type
type BedRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *BedRepository) Create(input bed.BedCore) (int, error) {
	ret := _m.Called(input)

	var r0 int
	if rf, ok := ret.Get(0).(func(bed.BedCore) int); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bed.BedCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *BedRepository) Delete(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: kelasreq, statusreq, limit, offset, id
func (_m *BedRepository) GetAll(kelasreq string, statusreq string, limit int, offset int, id int) ([]bed.BedCore, int, error) {
	ret := _m.Called(kelasreq, statusreq, limit, offset, id)

	var r0 []bed.BedCore
	if rf, ok := ret.Get(0).(func(string, string, int, int, int) []bed.BedCore); ok {
		r0 = rf(kelasreq, statusreq, limit, offset, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bed.BedCore)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, int, int, int) int); ok {
		r1 = rf(kelasreq, statusreq, limit, offset, id)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int, int, int) error); ok {
		r2 = rf(kelasreq, statusreq, limit, offset, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: id
func (_m *BedRepository) GetById(id int) (bed.BedCore, error) {
	ret := _m.Called(id)

	var r0 bed.BedCore
	if rf, ok := ret.Get(0).(func(int) bed.BedCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bed.BedCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *BedRepository) Update(input bed.BedCore, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(bed.BedCore, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBedRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBedRepository creates a new instance of BedRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBedRepository(t mockConstructorTestingTNewBedRepository) *BedRepository {
	mock := &BedRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
