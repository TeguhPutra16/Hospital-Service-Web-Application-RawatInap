// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	hospital "github.com/KamarRS-App/KamarRS-App/features/hospital"
	mock "github.com/stretchr/testify/mock"
)

// HospitalRepo is an autogenerated mock type for the RepositoryInterface type
type HospitalRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *HospitalRepo) Create(input hospital.HospitalCore) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(hospital.HospitalCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *HospitalRepo) Delete(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: provinsi, kabKota, nama, limit, offset
func (_m *HospitalRepo) GetAll(provinsi string, kabKota string, nama string, limit int, offset int) ([]hospital.HospitalCore, int, error) {
	ret := _m.Called(provinsi, kabKota, nama, limit, offset)

	var r0 []hospital.HospitalCore
	if rf, ok := ret.Get(0).(func(string, string, string, int, int) []hospital.HospitalCore); ok {
		r0 = rf(provinsi, kabKota, nama, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hospital.HospitalCore)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, string, int, int) int); ok {
		r1 = rf(provinsi, kabKota, nama, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string, int, int) error); ok {
		r2 = rf(provinsi, kabKota, nama, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: id
func (_m *HospitalRepo) GetById(id int) (hospital.HospitalCore, error) {
	ret := _m.Called(id)

	var r0 hospital.HospitalCore
	if rf, ok := ret.Get(0).(func(int) hospital.HospitalCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(hospital.HospitalCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *HospitalRepo) Update(input hospital.HospitalCore, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(hospital.HospitalCore, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHospitalRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewHospitalRepo creates a new instance of HospitalRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHospitalRepo(t mockConstructorTestingTNewHospitalRepo) *HospitalRepo {
	mock := &HospitalRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
