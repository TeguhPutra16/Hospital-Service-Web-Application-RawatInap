// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	hospitalstaff "github.com/KamarRS-App/KamarRS-App/features/hospitalstaff"
	mock "github.com/stretchr/testify/mock"
)

// StaffRepository is an autogenerated mock type for the RepositoryInterface type
type StaffRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *StaffRepository) Create(input hospitalstaff.HospitalStaffCore) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(hospitalstaff.HospitalStaffCore) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteById provides a mock function with given fields: id
func (_m *StaffRepository) DeleteById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllStaff provides a mock function with given fields: namaRs, limit, page
func (_m *StaffRepository) GetAllStaff(namaRs string, limit int, page int) ([]hospitalstaff.HospitalStaffCore, int, error) {
	ret := _m.Called(namaRs, limit, page)

	var r0 []hospitalstaff.HospitalStaffCore
	if rf, ok := ret.Get(0).(func(string, int, int) []hospitalstaff.HospitalStaffCore); ok {
		r0 = rf(namaRs, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hospitalstaff.HospitalStaffCore)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = rf(namaRs, limit, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(namaRs, limit, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStaff provides a mock function with given fields: id
func (_m *StaffRepository) GetStaff(id int) (hospitalstaff.HospitalStaffCore, error) {
	ret := _m.Called(id)

	var r0 hospitalstaff.HospitalStaffCore
	if rf, ok := ret.Get(0).(func(int) hospitalstaff.HospitalStaffCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(hospitalstaff.HospitalStaffCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, input
func (_m *StaffRepository) Update(id int, input hospitalstaff.HospitalStaffCore) error {
	ret := _m.Called(id, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, hospitalstaff.HospitalStaffCore) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStaffRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewStaffRepository creates a new instance of StaffRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStaffRepository(t mockConstructorTestingTNewStaffRepository) *StaffRepository {
	mock := &StaffRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
